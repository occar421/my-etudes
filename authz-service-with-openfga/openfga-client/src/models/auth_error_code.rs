/*
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthErrorCode {
    #[serde(rename = "no_auth_error")]
    NoAuthError,
    #[serde(rename = "auth_failed_invalid_subject")]
    AuthFailedInvalidSubject,
    #[serde(rename = "auth_failed_invalid_audience")]
    AuthFailedInvalidAudience,
    #[serde(rename = "auth_failed_invalid_issuer")]
    AuthFailedInvalidIssuer,
    #[serde(rename = "invalid_claims")]
    InvalidClaims,
    #[serde(rename = "auth_failed_invalid_bearer_token")]
    AuthFailedInvalidBearerToken,
    #[serde(rename = "bearer_token_missing")]
    BearerTokenMissing,
    #[serde(rename = "unauthenticated")]
    Unauthenticated,
    #[serde(rename = "forbidden")]
    Forbidden,

}

impl std::fmt::Display for AuthErrorCode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::NoAuthError => write!(f, "no_auth_error"),
            Self::AuthFailedInvalidSubject => write!(f, "auth_failed_invalid_subject"),
            Self::AuthFailedInvalidAudience => write!(f, "auth_failed_invalid_audience"),
            Self::AuthFailedInvalidIssuer => write!(f, "auth_failed_invalid_issuer"),
            Self::InvalidClaims => write!(f, "invalid_claims"),
            Self::AuthFailedInvalidBearerToken => write!(f, "auth_failed_invalid_bearer_token"),
            Self::BearerTokenMissing => write!(f, "bearer_token_missing"),
            Self::Unauthenticated => write!(f, "unauthenticated"),
            Self::Forbidden => write!(f, "forbidden"),
        }
    }
}

impl Default for AuthErrorCode {
    fn default() -> AuthErrorCode {
        Self::NoAuthError
    }
}

