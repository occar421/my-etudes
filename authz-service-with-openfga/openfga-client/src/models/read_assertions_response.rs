/*
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReadAssertionsResponse {
    #[serde(rename = "authorization_model_id")]
    pub authorization_model_id: String,
    #[serde(rename = "assertions", skip_serializing_if = "Option::is_none")]
    pub assertions: Option<Vec<models::Assertion>>,
}

impl ReadAssertionsResponse {
    pub fn new(authorization_model_id: String) -> ReadAssertionsResponse {
        ReadAssertionsResponse {
            authorization_model_id,
            assertions: None,
        }
    }
}

