/*
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListObjectsRequest {
    #[serde(rename = "authorization_model_id", skip_serializing_if = "Option::is_none")]
    pub authorization_model_id: Option<String>,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "relation")]
    pub relation: String,
    #[serde(rename = "user")]
    pub user: String,
    #[serde(rename = "contextual_tuples", skip_serializing_if = "Option::is_none")]
    pub contextual_tuples: Option<Box<models::ContextualTupleKeys>>,
    /// Additional request context that will be used to evaluate any ABAC conditions encountered in the query evaluation.
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<serde_json::Value>,
    #[serde(rename = "consistency", skip_serializing_if = "Option::is_none")]
    pub consistency: Option<models::ConsistencyPreference>,
}

impl ListObjectsRequest {
    pub fn new(r#type: String, relation: String, user: String) -> ListObjectsRequest {
        ListObjectsRequest {
            authorization_model_id: None,
            r#type,
            relation,
            user,
            contextual_tuples: None,
            context: None,
            consistency: None,
        }
    }
}

