/*
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 1.x
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelationMetadata {
    #[serde(rename = "directly_related_user_types", skip_serializing_if = "Option::is_none")]
    pub directly_related_user_types: Option<Vec<models::RelationReference>>,
    #[serde(rename = "module", skip_serializing_if = "Option::is_none")]
    pub module: Option<String>,
    #[serde(rename = "source_info", skip_serializing_if = "Option::is_none")]
    pub source_info: Option<Box<models::SourceInfo>>,
}

impl RelationMetadata {
    pub fn new() -> RelationMetadata {
        RelationMetadata {
            directly_related_user_types: None,
            module: None,
            source_info: None,
        }
    }
}

